import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

public class LoggerParser {

    public static LinkedList<LogEntry> getOperations(Path rootDir){
        // –ø–æ–ª—É—á–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
        try{
            List<Path> paths = getLogFiles(rootDir); // –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –ø—É—Ç–∏
            return readLogs(paths); // –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–ª–∏ —Ñ–∞–π–ª—ã
        } catch (IOException e) {
            e.printStackTrace(); // —Å—Ç–µ–∫ —Ç—Ä–µ–π—Å
            return null;
        }

    }

    private static LinkedList<LogEntry>  readLogs(List<Path> paths){
        // —Ç–µ–ø–µ—Ä—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä–µ–∞–ª–∏–∑—É–µ–º –≤ record
        LinkedList<LogEntry> userOperations = new LinkedList<>();
        for (Path path : paths) {
            try {
                List<String> lines = Files.readAllLines(path);
                for (String line : lines) {
                    userOperations.add(parseOperation(line));
                }
            } catch (IOException e) {
                e.printStackTrace();
                return null;
            }

        }
        return userOperations;
    }

    private static LogEntry parseOperation(String line){
        double amount;
        OperationType operation;
        String[] items = line.split(" ");
        LocalDateTime dateTime = LocalDateTime.parse(items[0] + items[0]);
        String user = items[2];
        switch (items[3]) {
            case "balance" -> {
                operation = OperationType.BALANCE_INQUIRY;
                amount = Integer.parseInt(items[5]);
                return new LogEntry(line, dateTime, user, operation, amount, null);
            }
            case "transferred" -> {
                operation = OperationType.TRANSFERRED;
                amount = Integer.parseInt(items[4]);
                String userTo = items[6];
                return new LogEntry(line, dateTime, user, operation, amount, userTo);
            }
            case "withdrew" -> {
                operation = OperationType.WITHDREW;
                amount = Integer.parseInt(items[4]);
                return new LogEntry(line, dateTime, user, operation, amount, null);
            }
            case null, default -> throw new LogParseException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: " + line);
        }
    }

    private static List<Path> getLogFiles(Path rootDir) throws IOException {
        return Files.walk(rootDir) // üî• –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å
                .filter(Files::isRegularFile)
                .filter(path -> path.toString().endsWith(".log"))
                .collect(Collectors.toList());
    }


}
